/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PanelArray.java
 *
 * Created on 9.12.2011, 19:35:55
 */
package cz.upce.inzui.z9.array;

import cz.upce.inzui.z9.comp.PanelCrossroads;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import org.apache.log4j.Logger;

/**
 *
 * @author Marty
 */
public final class PanelArray extends javax.swing.JPanel {

    private BufferedImage bulbOn = null;
    private BufferedImage bulbOff = null;
    protected static Logger logger = Logger.getLogger(PanelArray.class);
    private PanelBulb[][] map = null;
    private int rows = 0;
    private int colums = 0;
    private PanelCrossroads crossroads;

    public PanelArray(PanelCrossroads crossroads, int rows, int colums) {
        this.rows = rows;
        this.colums = colums;
        map = new PanelBulb[rows][colums];
        this.crossroads = crossroads;
        this.setLayout(new GridLayout(rows, colums, 2, 2));
        init();
        this.setBackground(Color.gray);
        this.setMinimumSize(new Dimension(168, 168));
    }

    protected BufferedImage getBulbOn() {
        if (bulbOn == null) {
            bulbOn = loadImage(new File("imgs/BulbOn.png"));
        }
        return bulbOn;
    }

    protected BufferedImage getBulbOff() {
        if (bulbOff == null) {
            bulbOff = loadImage(new File("imgs/BulbOff.png"));
        }
        return bulbOff;
    }

    private BufferedImage loadImage(File f) {
        try {
            return ImageIO.read(f);
        } catch (IOException e) {
            logger.error(f.toString(), e);
            return null;
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    protected void EvtOnBulb(int row, int colum) {
        map[row][colum].negate();
        if (crossroads.cross()) {
            if (row + 1 < rows) {
                map[row + 1][colum].negate();
            }
            if (colum + 1 < colums) {
                map[row][colum + 1].negate();
            }
            if (row - 1 >= 0) {
                map[row - 1][colum].negate();
            }
            if (colum - 1 >= 0) {
                map[row][colum - 1].negate();
            }
        }
    }

    public boolean isLightIsOn(int row, int colum) {
        return this.map[row][colum].isLightIsOn();
    }

    public void init() {
        this.removeAll();
        for (int x = 0; x < rows; x++) {
            for (int y = 0; y < colums; y++) {
                map[x][y] = new PanelBulb(x, y, this);
                this.add(map[x][y]);
            }
        }
        this.repaint();
        this.revalidate();
    }

    public int getColums() {
        return colums;
    }

    public int getRows() {
        return rows;
    }

    boolean isLookingForSolution() {
        return crossroads.isLookingForSolution();
    }
}
